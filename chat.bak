# Copyright (c) Meta Platforms, Inc. and affiliates.
# This software may be used and distributed according to the terms of the Llama 2 Community License Agreement.

from typing import List, Optional
import json  
import fire

from llama import Llama, Dialog

def main(
    ckpt_dir: str,
    tokenizer_path: str,
    prompts_file: str = "prompts.json",  # New parameter for JSON file
    temperature: float = 0.6,
    top_p: float = 0.9,
    max_seq_len: int = 512,
    max_batch_size: int = 8,
    max_gen_len: Optional[int] = None,
):
    """
    Entry point of the program for generating text using a pretrained model.
    ...
    """
    generator = Llama.build(
        ckpt_dir=ckpt_dir,
        tokenizer_path=tokenizer_path,
        max_seq_len=max_seq_len,
        max_batch_size=max_batch_size,
    )

    # Load dialogs from JSON file
    with open(prompts_file, 'r') as f:
        dialogs = json.load(f)    

    for dialog in dialogs:
        result = generator.chat_completion(
            [dialog],  # Single dialog in a list
            max_gen_len=max_gen_len,
            temperature=temperature,
            top_p=top_p,
        )[0]  # Taking first (and only) result from the list

        for msg in dialog:
            print(f"{msg['role'].capitalize()}: {msg['content']}\n")
        print(
            f"> {result['generation']['role'].capitalize()}: {result['generation']['content']}"
        )
        print("\n==================================\n")


if __name__ == "__main__":
    fire.Fire(main)
